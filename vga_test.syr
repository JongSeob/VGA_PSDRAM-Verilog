Release 14.7 - xst P.20131013 (nt64)
Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
--> Parameter TMPDIR set to xst/projnav.tmp


Total REAL time to Xst completion: 1.00 secs
Total CPU time to Xst completion: 0.74 secs
 
--> Parameter xsthdpdir set to xst


Total REAL time to Xst completion: 1.00 secs
Total CPU time to Xst completion: 0.75 secs
 
--> Reading design: vga_test.prj

TABLE OF CONTENTS
  1) Synthesis Options Summary
  2) HDL Compilation
  3) Design Hierarchy Analysis
  4) HDL Analysis
  5) HDL Synthesis
     5.1) HDL Synthesis Report
  6) Advanced HDL Synthesis
     6.1) Advanced HDL Synthesis Report
  7) Low Level Synthesis
  8) Partition Report
  9) Final Report
	9.1) Device utilization summary
	9.2) Partition Resource Summary
	9.3) TIMING REPORT


=========================================================================
*                      Synthesis Options Summary                        *
=========================================================================
---- Source Parameters
Input File Name                    : "vga_test.prj"
Input Format                       : mixed
Ignore Synthesis Constraint File   : NO

---- Target Parameters
Output File Name                   : "vga_test"
Output Format                      : NGC
Target Device                      : xc3s1200e-4-fg320

---- Source Options
Top Module Name                    : vga_test
Automatic FSM Extraction           : YES
FSM Encoding Algorithm             : Auto
Safe Implementation                : No
FSM Style                          : LUT
RAM Extraction                     : Yes
RAM Style                          : Auto
ROM Extraction                     : Yes
Mux Style                          : Auto
Decoder Extraction                 : YES
Priority Encoder Extraction        : Yes
Shift Register Extraction          : YES
Logical Shifter Extraction         : YES
XOR Collapsing                     : YES
ROM Style                          : Auto
Mux Extraction                     : Yes
Resource Sharing                   : YES
Asynchronous To Synchronous        : NO
Multiplier Style                   : Auto
Automatic Register Balancing       : No

---- Target Options
Add IO Buffers                     : YES
Global Maximum Fanout              : 100000
Add Generic Clock Buffer(BUFG)     : 24
Register Duplication               : YES
Slice Packing                      : YES
Optimize Instantiated Primitives   : NO
Use Clock Enable                   : Yes
Use Synchronous Set                : Yes
Use Synchronous Reset              : Yes
Pack IO Registers into IOBs        : Auto
Equivalent register Removal        : YES

---- General Options
Optimization Goal                  : Speed
Optimization Effort                : 1
Keep Hierarchy                     : No
Netlist Hierarchy                  : As_Optimized
RTL Output                         : Yes
Global Optimization                : AllClockNets
Read Cores                         : YES
Write Timing Constraints           : NO
Cross Clock Analysis               : NO
Hierarchy Separator                : /
Bus Delimiter                      : <>
Case Specifier                     : Maintain
Slice Utilization Ratio            : 100
BRAM Utilization Ratio             : 100
Verilog 2001                       : YES
Auto BRAM Packing                  : NO
Slice Utilization Ratio Delta      : 5

=========================================================================


=========================================================================
*                          HDL Compilation                              *
=========================================================================
Compiling verilog file "Frequency_Divider.v" in library work
Compiling verilog file "sync_generater.v" in library work
Module <Frequency_Divider> compiled
Compiling verilog file "Palette.v" in library work
Module <sync_generater> compiled
Compiling verilog file "vga.v" in library work
Module <Palette> compiled
Compiling verilog file "uart.v" in library work
Module <VGA> compiled
Compiling verilog file "SevenSegment.v" in library work
Module <uart> compiled
Module <SevenSegment> compiled
Module <SegmentDecoder> compiled
Compiling verilog file "psdram.v" in library work
Module <CounterRefresh> compiled
Compiling verilog file "vga_test.v" in library work
Module <psdram> compiled
Module <vga_test> compiled
No errors in compilation
Analysis of file <"vga_test.prj"> succeeded.
 
Compiling vhdl file "E:/VGA_PSDRAM_Project/Rs232RefComp.vhd" in Library work.
Architecture behavioral of Entity rs232refcomp is up to date.

=========================================================================
*                     Design Hierarchy Analysis                         *
=========================================================================
Analyzing hierarchy for module <vga_test> in library <work>.

Analyzing hierarchy for module <VGA> in library <work> with parameters.
	HLINES = "00000000000000000000001010000000"
	HMAX = "00000000000000000000001100010010"
	STATE0 = "0000"
	STATE1 = "0001"
	STATE2 = "0010"
	STATE3 = "0011"
	STATE4 = "0100"
	VLINES = "00000000000000000000000111100000"
	VMAX = "00000000000000000000001000001001"

Analyzing hierarchy for module <psdram> in library <work> with parameters.
	CHECK_DATA = "010"
	FALSE = "00000000000000000000000000000000"
	MAX_SIZE = "10000000000000000000000"
	MEMORY_CLEAR = "011"
	STANDBY = "000"
	STATE0 = "0000"
	STATE1 = "0001"
	STATE2 = "0010"
	STATE3 = "0011"
	STATE4 = "0100"
	STATE5 = "0101"
	STATE6 = "0110"
	STATE7 = "0111"
	TRUE = "00000000000000000000000000000001"
	UART_WRITE = "001"

Analyzing hierarchy for module <uart> in library <work> with parameters.
	RECEIVE_0 = "000"
	RECEIVE_1 = "001"
	RECEIVE_2 = "010"
	RECEIVE_3 = "011"
	RECEIVE_4 = "100"
	SEND_0 = "000"
	SEND_1 = "001"
	SEND_2 = "010"
	SEND_3 = "011"
	SEND_4 = "100"

Analyzing hierarchy for module <SevenSegment> in library <work>.

Analyzing hierarchy for module <Frequency_Divider> in library <work> with parameters.
	COUNTER_SIZE = "00000000000000000000000000000001"
	MAX_COUNT = "00000000000000000000000000000001"
	TARGET_FREQUENCY = "00000001011111010111100001000000"

Analyzing hierarchy for module <sync_generater> in library <work> with parameters.
	HFP = "00000000000000000000001010001001"
	HLINES = "00000000000000000000001010000000"
	HMAX = "00000000000000000000001100010010"
	HSP = "00000000000000000000001011101000"
	VFP = "00000000000000000000000111100011"
	VLINES = "00000000000000000000000111100000"
	VMAX = "00000000000000000000001000001001"
	VSP = "00000000000000000000000111100100"

Analyzing hierarchy for module <Palette> in library <work>.

Analyzing hierarchy for entity <rs232refcomp> in library <work> (architecture <behavioral>).

Analyzing hierarchy for module <SegmentDecoder> in library <work> with parameters.
	BLANK = "1111111"
	EIGHT = "0000000"
	ELEVEN = "1100000"
	FIFTEEN = "0111000"
	FIVE = "0100100"
	FOUR = "1001100"
	FOURTEEN = "0110000"
	NINE = "0000100"
	ONE = "1001111"
	SEVEN = "0001111"
	SIX = "0100000"
	TEN = "0001000"
	THIRTEEN = "1000010"
	THREE = "0000110"
	TWELVE = "0110001"
	TWO = "0010010"
	ZERO = "0000001"

Analyzing hierarchy for module <CounterRefresh> in library <work> with parameters.
	DESIRED_FREQ = "00000000000000000000000011110000"

Analyzing hierarchy for module <Frequency_Divider> in library <work> with parameters.
	COUNTER_SIZE = "00000000000000000000000000000001"
	MAX_COUNT = "00000000000000000000000000000001"
	TARGET_FREQUENCY = "00000001011111010111100001000000"


=========================================================================
*                            HDL Analysis                               *
=========================================================================
Analyzing top module <vga_test>.
Module <vga_test> is correct for synthesis.
 
Analyzing module <VGA> in library <work>.
	HLINES = 32'sb00000000000000000000001010000000
	HMAX = 32'sb00000000000000000000001100010010
	STATE0 = 4'b0000
	STATE1 = 4'b0001
	STATE2 = 4'b0010
	STATE3 = 4'b0011
	STATE4 = 4'b0100
	VLINES = 32'sb00000000000000000000000111100000
	VMAX = 32'sb00000000000000000000001000001001
Module <VGA> is correct for synthesis.
 
Analyzing module <Frequency_Divider> in library <work>.
	COUNTER_SIZE = 32'sb00000000000000000000000000000001
	MAX_COUNT = 32'sb00000000000000000000000000000001
	TARGET_FREQUENCY = 32'sb00000001011111010111100001000000
Module <Frequency_Divider> is correct for synthesis.
 
Analyzing module <sync_generater> in library <work>.
	HFP = 32'sb00000000000000000000001010001001
	HLINES = 32'sb00000000000000000000001010000000
	HMAX = 32'sb00000000000000000000001100010010
	HSP = 32'sb00000000000000000000001011101000
	VFP = 32'sb00000000000000000000000111100011
	VLINES = 32'sb00000000000000000000000111100000
	VMAX = 32'sb00000000000000000000001000001001
	VSP = 32'sb00000000000000000000000111100100
Module <sync_generater> is correct for synthesis.
 
Analyzing module <Palette> in library <work>.
Module <Palette> is correct for synthesis.
 
Analyzing module <psdram> in library <work>.
	CHECK_DATA = 3'b010
	FALSE = 32'sb00000000000000000000000000000000
	MAX_SIZE = 23'b10000000000000000000000
	MEMORY_CLEAR = 3'b011
	STANDBY = 3'b000
	STATE0 = 4'b0000
	STATE1 = 4'b0001
	STATE2 = 4'b0010
	STATE3 = 4'b0011
	STATE4 = 4'b0100
	STATE5 = 4'b0101
	STATE6 = 4'b0110
	STATE7 = 4'b0111
	TRUE = 32'sb00000000000000000000000000000001
	UART_WRITE = 3'b001
Module <psdram> is correct for synthesis.
 
Analyzing module <uart> in library <work>.
	RECEIVE_0 = 3'b000
	RECEIVE_1 = 3'b001
	RECEIVE_2 = 3'b010
	RECEIVE_3 = 3'b011
	RECEIVE_4 = 3'b100
	SEND_0 = 3'b000
	SEND_1 = 3'b001
	SEND_2 = 3'b010
	SEND_3 = 3'b011
	SEND_4 = 3'b100
Module <uart> is correct for synthesis.
 
Analyzing Entity <rs232refcomp> in library <work> (Architecture <behavioral>).
Entity <rs232refcomp> analyzed. Unit <rs232refcomp> generated.

Analyzing module <SevenSegment> in library <work>.
Module <SevenSegment> is correct for synthesis.
 
Analyzing module <SegmentDecoder> in library <work>.
	BLANK = 7'b1111111
	EIGHT = 7'b0000000
	ELEVEN = 7'b1100000
	FIFTEEN = 7'b0111000
	FIVE = 7'b0100100
	FOUR = 7'b1001100
	FOURTEEN = 7'b0110000
	NINE = 7'b0000100
	ONE = 7'b1001111
	SEVEN = 7'b0001111
	SIX = 7'b0100000
	TEN = 7'b0001000
	THIRTEEN = 7'b1000010
	THREE = 7'b0000110
	TWELVE = 7'b0110001
	TWO = 7'b0010010
	ZERO = 7'b0000001
Module <SegmentDecoder> is correct for synthesis.
 
Analyzing module <CounterRefresh> in library <work>.
	DESIRED_FREQ = 32'sb00000000000000000000000011110000
Module <CounterRefresh> is correct for synthesis.
 

=========================================================================
*                           HDL Synthesis                               *
=========================================================================

Performing bidirectional port resolution...
INFO:Xst:2679 - Register <i> in unit <VGA> has a constant value of 1001111111 during circuit operation. The register is replaced by logic.
INFO:Xst:2679 - Register <count> in unit <Frequency_Divider> has a constant value of 0 during circuit operation. The register is replaced by logic.

Synthesizing Unit <psdram>.
    Related source file is "psdram.v".
WARNING:Xst:647 - Input <RamWait> is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
WARNING:Xst:647 - Input <BtnSwitch<3>> is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
    Using one-hot encoding for signal <Transaction>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <Transaction> of Case statement line 0 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <Transaction> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Using one-hot encoding for signal <CurrentPhase>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <Transaction> of Case statement line 0 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <Transaction> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <Transaction> of Case statement line 0 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <Transaction> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <Transaction> of Case statement line 0 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <Transaction> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <Transaction> of Case statement line 0 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <Transaction> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <Transaction> of Case statement line 0 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <Transaction> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <Transaction> of Case statement line 0 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <Transaction> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <CurrentPhase> of Case statement line 218 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <CurrentPhase> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Found 16-bit register for signal <Digit>.
    Found 1-bit register for signal <nRamUB>.
    Found 1-bit register for signal <nMemOE>.
    Found 1-bit register for signal <nMemWR>.
    Found 1-bit register for signal <nRamCE>.
    Found 23-bit register for signal <MemAdr>.
    Found 1-bit register for signal <nRamLB>.
    Found 24-bit register for signal <CurrentAdr>.
    Found 24-bit adder for signal <CurrentAdr$addsub0000> created at line 244.
    Found 7-bit register for signal <CurrentPhase>.
    Found 16-bit register for signal <DataLatch>.
    Found 16-bit adder for signal <DataLatch$addsub0000> created at line 150.
    Found 1-bit register for signal <DataWriteComplete>.
    Found 2-bit register for signal <nBE_Write>.
    Found 7-bit register for signal <NextPhase>.
    Found 24-bit comparator less for signal <NextPhase$cmp_lt0000> created at line 243.
    Found 4-bit register for signal <Transaction>.
    Found 24-bit register for signal <UsedAdrCnt>.
    Found 24-bit adder for signal <UsedAdrCnt$addsub0000> created at line 161.
    Summary:
	inferred 129 D-type flip-flop(s).
	inferred   3 Adder/Subtractor(s).
	inferred   1 Comparator(s).
Unit <psdram> synthesized.


Synthesizing Unit <Frequency_Divider>.
    Related source file is "Frequency_Divider.v".
    Found 1-bit register for signal <Outclk>.
    Summary:
	inferred   1 D-type flip-flop(s).
Unit <Frequency_Divider> synthesized.


Synthesizing Unit <Palette>.
    Related source file is "Palette.v".
    Found 256x8-bit ROM for signal <rgb>.
    Summary:
	inferred   1 ROM(s).
Unit <Palette> synthesized.


Synthesizing Unit <rs232refcomp>.
    Related source file is "E:/VGA_PSDRAM_Project/Rs232RefComp.vhd".
    Found finite state machine <FSM_0> for signal <sttCur>.
    -----------------------------------------------------------------------
    | States             | 3                                              |
    | Transitions        | 5                                              |
    | Inputs             | 2                                              |
    | Outputs            | 2                                              |
    | Clock              | tClk                      (rising_edge)        |
    | Reset              | RST                       (positive)           |
    | Reset type         | synchronous                                    |
    | Reset State        | sttidle                                        |
    | Power Up State     | sttidle                                        |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found finite state machine <FSM_1> for signal <stbeCur>.
    -----------------------------------------------------------------------
    | States             | 4                                              |
    | Transitions        | 8                                              |
    | Inputs             | 2                                              |
    | Outputs            | 4                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | RST                       (positive)           |
    | Reset type         | synchronous                                    |
    | Reset State        | stbeidle                                       |
    | Power Up State     | stbeidle                                       |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found finite state machine <FSM_2> for signal <strCur>.
    -----------------------------------------------------------------------
    | States             | 4                                              |
    | Transitions        | 7                                              |
    | Inputs             | 3                                              |
    | Outputs            | 4                                              |
    | Clock              | rClk                      (rising_edge)        |
    | Reset              | RST                       (positive)           |
    | Reset type         | synchronous                                    |
    | Reset State        | stridle                                        |
    | Power Up State     | stridle                                        |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
WARNING:Xst:737 - Found 1-bit latch for signal <TBE>. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
INFO:Xst:2371 - HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.
    Found 1-bit register for signal <FE>.
    Found 1-bit register for signal <OE>.
    Found 1-bit register for signal <PE>.
    Found 1-bit register for signal <RDA>.
    Found 9-bit up counter for signal <clkDiv>.
    Found 4-bit up counter for signal <ctr>.
    Found 4-bit up counter for signal <dataCtr>.
    Found 1-bit xor8 for signal <par$xor0000> created at line 117.
    Found 1-bit xor9 for signal <parError$xor0000> created at line 114.
    Found 1-bit register for signal <rClk>.
    Found 4-bit up counter for signal <rClkDiv>.
    Found 8-bit register for signal <rdReg>.
    Found 10-bit register for signal <rdSReg>.
    Found 4-bit up counter for signal <tfCtr>.
    Found 11-bit register for signal <tfSReg>.
    Summary:
	inferred   3 Finite State Machine(s).
	inferred   5 Counter(s).
	inferred  34 D-type flip-flop(s).
	inferred   2 Xor(s).
Unit <rs232refcomp> synthesized.


Synthesizing Unit <SegmentDecoder>.
    Related source file is "SevenSegment.v".
    Found 16x7-bit ROM for signal <Display>.
    Summary:
	inferred   1 ROM(s).
Unit <SegmentDecoder> synthesized.


Synthesizing Unit <CounterRefresh>.
    Related source file is "SevenSegment.v".
    Found 1-bit register for signal <OutClk>.
    Found 20-bit comparator greater for signal <OutClk$cmp_gt0000> created at line 143.
    Found 20-bit up counter for signal <q>.
    Summary:
	inferred   1 Counter(s).
	inferred   1 D-type flip-flop(s).
	inferred   1 Comparator(s).
Unit <CounterRefresh> synthesized.


Synthesizing Unit <uart>.
    Related source file is "uart.v".
WARNING:Xst:1780 - Signal <CounterWait_tbe> is never used or assigned. This unconnected signal will be trimmed during the optimization process.
WARNING:Xst:737 - Found 8-bit latch for signal <dbInSig>. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
WARNING:Xst:2474 - Clock and clock enable of register <send_rdy> are driven by the same logic. The clock enable is removed.
    Using one-hot encoding for signal <stRcvCur>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <stRcvCur> of Case statement line 87 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <stRcvCur> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Using one-hot encoding for signal <stSendCur>.
    Found 16-bit up counter for signal <CounterFE>.
    Found 16-bit up counter for signal <CounterOE>.
    Found 16-bit up counter for signal <CounterPE>.
    Found 16-bit up counter for signal <CounterReceived>.
    Found 8-bit up counter for signal <CounterWait_rda>.
    Found 8-bit register for signal <dbOutLatch>.
    Found 1-bit register for signal <FlagFrameError>.
    Found 1-bit register for signal <FlagOverrunError>.
    Found 1-bit register for signal <FlagPatityError>.
    Found 1-bit register for signal <rdSig>.
    Found 1-bit register for signal <send_rdy>.
    Found 4-bit register for signal <stRcvCur>.
    Found 4-bit register for signal <stRcvNext>.
    Found 5-bit register for signal <stSendCur>.
    Found 5-bit register for signal <stSendNext>.
    Found 1-bit register for signal <wrSig>.
    Summary:
	inferred   5 Counter(s).
	inferred  32 D-type flip-flop(s).
Unit <uart> synthesized.


Synthesizing Unit <SevenSegment>.
    Related source file is "SevenSegment.v".
    Found finite state machine <FSM_3> for signal <TmpCnt>.
    -----------------------------------------------------------------------
    | States             | 4                                              |
    | Transitions        | 4                                              |
    | Inputs             | 0                                              |
    | Outputs            | 8                                              |
    | Clock              | DownClk                   (rising_edge)        |
    | Power Up State     | 00                                             |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 4-bit register for signal <o_ControlLed>.
    Found 4-bit register for signal <Value>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred   8 D-type flip-flop(s).
Unit <SevenSegment> synthesized.


Synthesizing Unit <sync_generater>.
    Related source file is "sync_generater.v".
    Found 10-bit up counter for signal <vcount>.
    Found 1-bit register for signal <vsync>.
    Found 10-bit up counter for signal <hcount>.
    Found 1-bit register for signal <hsync>.
    Found 10-bit comparator greater for signal <hsync$cmp_gt0000> created at line 72.
    Found 10-bit comparator lessequal for signal <hsync$cmp_le0000> created at line 72.
    Found 10-bit comparator greater for signal <vsync$cmp_gt0000> created at line 77.
    Found 10-bit comparator lessequal for signal <vsync$cmp_le0000> created at line 77.
    Summary:
	inferred   2 Counter(s).
	inferred   2 D-type flip-flop(s).
	inferred   4 Comparator(s).
Unit <sync_generater> synthesized.


Synthesizing Unit <VGA>.
    Related source file is "vga.v".
WARNING:Xst:1305 - Output <Digit> is never assigned. Tied to value 0000000000000000.
WARNING:Xst:653 - Signal <rgb_pallete> is used but never assigned. This sourceless signal will be automatically connected to value 00000000.
WARNING:Xst:646 - Signal <rgb_next<639>> is assigned but never used. This unconnected signal will be trimmed during the optimization process.
WARNING:Xst:653 - Signal <rgb_cur<639>> is used but never assigned. This sourceless signal will be automatically connected to value 00000000.
WARNING:Xst:646 - Signal <rgb> is assigned but never used. This unconnected signal will be trimmed during the optimization process.
    Register <RamCE> equivalent to <MemOE> has been removed
    Using one-hot encoding for signal <state_reg>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <state_reg> of Case statement line 116 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <state_reg> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
